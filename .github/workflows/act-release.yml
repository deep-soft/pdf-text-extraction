name: act-release

on:
  workflow_dispatch:
#  push:
#    branches: [ "*" ]
#  pull_request:
#    branches: [ "master" ]
    inputs:
      CreateZipAll:
        description: CreateZipAll
        type: boolean
        default: false
        required: true
      RunTests:
        description: RunTests
        type: boolean
        default: false
        required: true
      ZIP_exclusions:
        description: ZIP_exclusions
        default: '*.map *.pdb'
        required: true

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  TAG_NAME: 'TextExtractionCLI'
  PROGRAM: 'TextExtractionCLI'
  PROG_NAME: 'TextExtraction'
  VERSION: 'v1.0.0'

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-11       }
          - { os: macos-12       }
          - { os: macos-13       }
          - { os: macos-latest   }
          - { os: ubuntu-20.04   }
          - { os: ubuntu-22.04   }
          - { os: ubuntu-latest  }
          - { os: windows-2019   }
          - { os: windows-2022   }
          - { os: windows-latest }

    steps:
      - name: Checkout
        uses: deep-soft/checkout@v3

      - name: get program version
        shell: bash
        run: |
          VERSION=$(grep "project(" "CMakeLists.txt" | awk -F' ' '{print $3}' | awk -F')' '{print $1}');
          echo "VERSION=v$VERSION";
          echo "VERSION=v$VERSION" >> $GITHUB_ENV;

      - name: set env.SED_EXE and macOS install gnu-sed
        #if: ${{ startsWith(matrix.job.os, 'macos') }}
        shell: bash
        run: |
          SED_EXE=$(which sed);
          echo "SED_EXE=$SED_EXE";
          if [[ ${{ matrix.job.os }} =~ "macos" ]]; then
            brew install gnu-sed;
            export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH";
            SED_EXE=$(which sed);
          fi
          echo "SED_EXE=$SED_EXE";
          echo "SED_EXE=$SED_EXE" >> $GITHUB_ENV;
          #ls -la $SED_EXE;
          #export sed=$SED_EXE
          #which sed

      - name: change PDF-Writer repository
        shell: bash
        run: |
          #GIT_REPOSITORY https://github.com/galkahana/PDF-Writer.git
          #GIT_REPOSITORY https://github.com/deep-soft/PDF-Writer.git
          OLD_REP=$(grep "GIT_REPOSITORY" "CMakeLists.txt" | awk -F' ' '{print $2}');
          ${{ env.SED_EXE }} -i "s!github.com/galkahana/PDF-Writer!github.com/deep-soft/PDF-Writer!" "CMakeLists.txt"
          NEW_REP=$(grep "GIT_REPOSITORY" "CMakeLists.txt" | awk -F' ' '{print $2}');
          echo "OLD_REP=$OLD_REP";
          echo "NEW_REP=$NEW_REP";

      - name: Setup cache
        uses: deep-soft/cache@v3
        with:
          path: ${{ github.workspace }}
          key: ccache-${{ matrix.job.os }}
          restore-keys: |
            ccache-${{ matrix.job.os }}-

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Set release directory to add to archive
        continue-on-error: true
        shell: bash
        run: |
          if [[ "${{ matrix.job.os }}" =~ "windows" ]]; then
            release_directory="build/${{ env.PROGRAM }}/Release";
          else
            release_directory="build/${{ env.PROGRAM }}";
          fi
          echo "release_directory=$release_directory";
          echo "release_directory=$release_directory" >> $GITHUB_ENV;
          echo list $release_directory - begin
          ls -la $release_directory
          echo list $release_directory - end
 
# zip release begin
      - name: Create Zip Archive Release
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.PROGRAM }}-${{ env.VERSION }}-${{ matrix.job.os }}.zip'
          directory: ${{ env.release_directory }}
          exclusions: ${{ env.ZIP_exclusions }}
          recursive_exclusions: ${{ env.ZIP_exclusions }}
          path: "${{ env.PROG_NAME }}*"
          env_variable: 'ZIP_RELEASE_ARCHIVE'
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}-${{ env.VERSION }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}
# zip release end

# zip release begin
      - name: Create Zip Archive Release - ALL
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.PROGRAM }}-${{ env.VERSION }}-${{ matrix.job.os }}-ALL.zip'
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: 'ZIP_RELEASE_ARCHIVE_ALL'
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE_ALL }}

      - name: Publish
        if: ${{ inputs.CreateZipAll }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}-ALL
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE_ALL }}
# zip release end

      - name: Test
        if: ${{ inputs.RunTests }}
        timeout-minutes: 1
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
